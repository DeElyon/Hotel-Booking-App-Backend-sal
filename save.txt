import Vendor from "../models/Vendor.js";

export const updateVendorProfile = async (req, res) => {
  try {
    const vendorId = req.vendor.id;

    if (!req.vendor) {
      return res.status(403).json({ message: "Unauthorized: No vendor ID found" });
    }

    

    const {
      businessName,
      businessType,
      phone,
      address,
      branch,
      role,
      services,
      bankName,
      bankCode,
      accountNumber,
      bankAccountName,
      percentageCharge,
      paystackSubAccount,
    } = req.body;

    const vendorImage = req.file ? req.file.filename : null;

    const vendorRecord = await Vendor.findById(vendorId);
    if (!vendorRecord) {
      return res.status(404).json({ message: "Vendor not found" });
    }
    


    let servicesArray = [];
    if (services) {
      if (typeof services === "string") {
        try {
          servicesArray = JSON.parse(services);
        } catch (err) {
          return res.status(400).json({ message: "Invalid services format" });
        }
      } else if (Array.isArray(services)) {
        servicesArray = services;
      } else {
        return res.status(400).json({ message: "Services must be an array or stringified array" });
      }
    }

    // let subaccountUpdateData = null;
    // if (paystackSubAccount && (bankCode || accountNumber || percentageCharge || businessName)) {
    //   const subAccountUpdatePayload = {
    //     business_name: businessName,
    //     settlement_bank: bankCode,
    //     account_number: accountNumber,
    //     percentage_charge: Number(percentageCharge),
    //   };

    //   const subaccountUpdateResponse = await fetch(
    //     `https://api.paystack.co/subaccount/${paystackSubAccount}`,
    //     {
    //       method: "PUT",
    //       headers: {
    //         Authorization: `Bearer ${process.env.PAYSTACK_SECRET_KEY}`,
    //         "Content-Type": "application/json",
    //       },
    //       body: JSON.stringify(subAccountUpdatePayload),
    //     }
    //   );

    //   const updateJson = await subaccountUpdateResponse.json();

    //   if (!updateJson.status) {
    //     return res.status(400).json({ message: "Paystack subaccount update failed", error: updateJson.message });
    //   }

    //   subaccountUpdateData = updateJson.data;
    // }

   
    if (businessName) vendorRecord.businessName =  businessName;
    if (businessType) vendorRecord.businessType = businessType;
    if (phone) vendorRecord.phone = phone;
    if (address) vendorRecord.address = address;
    if (branch) vendorRecord.branch = branch;
    if (role) vendorRecord.role = role;
    if (vendorImage){ const BASE_URL = process.env.BASE_URL || "http://localhost:3000"; vendorRecord.profileImage = `https://hotel-booking-app-backend-30q1.onrender.com/uploads/${vendorImage}`;
    }
    if (servicesArray.length > 0) vendorRecord.services = servicesArray;


    // if (bankName) vendorRecord.paymentDetails.bankName = bankName;
    // if (bankCode) vendorRecord.paymentDetails.bankCode = bankCode;
    // if (accountNumber) vendorRecord.paymentDetails.accountNumber = accountNumber;
    // if (bankAccountName) vendorRecord.paymentDetails.bankAccountName = bankAccountName;
    // if (percentageCharge) vendorRecord.paymentDetails.percentageCharge = Number(percentageCharge);
    // if (subaccountUpdateData?.subaccount_code) {
    //   vendorRecord.paymentDetails.paystackSubAccount = subaccountUpdateData.subaccount_code;
    // }

    // await Vendor.updateOne({ _id: vendorId }, {
    //     $set: {
    //       ...(businessName && { businessName }),
    //       ...(businessType && { businessType }),
    //       ...(phone && { phone }),
    //       ...(address && { address }),
    //       ...(branch && { branch }),
    //       ...(role && { role }),
    //       ...(servicesArray.length && { services: servicesArray }),
    //       ...(vendorImage && { profileImage: `https://hotel-booking-app-backend-30q1.onrender.com/uploads/${vendorImage}` })
    //     }
    //   });
      

    await vendorRecord.save();

    res.status(200).json({ message: "Vendor record updated successfully", vendor: vendorRecord });
  } catch (error) {
    console.error("Error updating vendor:", error);
    res.status(500).json({ message: "Internal server error", error: error.message });
  }
};