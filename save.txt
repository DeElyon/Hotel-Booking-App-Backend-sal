
import jwt from "jsonwebtoken";
import dotenv from "dotenv";
import User from "../models/User.js";
import Vendor from "../models/Vendor.js";

dotenv.config();

export const authorize = (req, res, next) => {
  const token = req.headers.authorization?.split(" ")[1];
  if (!token) {
    return res
      .status(401)
      .json({ message: "Not authorized, no token provided." });
  }
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = { vendorId: decoded.id }; // Attach vendor ID
    next();
  } catch (error) {
    res.status(403).json({ message: "Invalid or expired token." });
  }
};

export const authenticateVendor = async (req, res, next) => {
  try {
    const token = req.headers.authorization?.split(" ")[1]; // Get token from Authorization header
    if (!token)
      return res
        .status(401)
        .json({ message: "Unauthorized: No token provided" });
    const decoded = jwt.verify(token, process.env.JWT_SECRET); // Verify the token
    req.vendor = await Vendor.findById(decoded.id).select("_id");
    if (!req.vendor) {
      return res.status(401).json({ message: "Unauthorized: Vendor not found" });
    }
    next();
  } catch (error) {
    return res.status(403).json({ message: "Invalid or expired token" });
  }
};